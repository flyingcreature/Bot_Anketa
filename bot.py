import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, \
    InlineKeyboardMarkup
from dotenv import load_dotenv
from os import getenv
from info import survey, load_data, save_data, result
from time import sleep

# —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
load_dotenv()
token = getenv("BOT_TOKEN")

bot = telebot.TeleBot(token)

# —Å–æ–∑–¥–∞—ë–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
data_path = "data.json"
data_users = load_data(data_path)
# —Å–æ–∑–¥–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard_1 = InlineKeyboardMarkup()
keyboard_1.row(InlineKeyboardButton("–î–∞", callback_data='click'))

markup_question_2 = ReplyKeyboardMarkup(resize_keyboard=True)
markup_question_2.add(KeyboardButton("–ú—è—á"))
markup_question_2.add(KeyboardButton("–õ—ã–∂–∏"))
markup_question_2.add(KeyboardButton("–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã"))

markup_question_3 = ReplyKeyboardMarkup(resize_keyboard=True)
markup_question_3.add(KeyboardButton("–¢–µ—Ö–Ω–∏–∫–∞ –∏ —Ç–∞–∫—Ç–∏–∫–∞"))
markup_question_3.add(KeyboardButton("–°–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"))
markup_question_3.add(KeyboardButton("–î—Ä—É–≥–æ–µ"))

markup_question_4 = ReplyKeyboardMarkup(resize_keyboard=True)
markup_question_4.add(KeyboardButton("–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è"))
markup_question_4.add(KeyboardButton("–°–∏–ª–æ–≤–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"))
markup_question_4.add(KeyboardButton("–ú—ã—à–ª–µ–Ω–∏–µ"))

markup_question_5 = ReplyKeyboardMarkup(resize_keyboard=True)
markup_question_5.add(KeyboardButton("–ü—Ä–æ—Ñ. —Å–ø–æ—Ä—Ç"))
markup_question_5.add(KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"))
markup_question_5.add(KeyboardButton("–ß–µ–º-—Ç–æ –∑–∞–Ω—è—Ç—å"))


@bot.message_handler(commands=['start'])
def send_start(message: Message):
    # —Å–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–∞–≤–∞—Ç–µ–ª–∏ –≤ json —Ñ–∞–π–ª–µ
    if str(message.chat.id) not in data_users:
        # —Å–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ json
        data_users[str(message.chat.id)] = {"name": message.from_user.first_name, "progress": 0, "summer_sports": 0,
                                            "winter_sports": 0, "other": 0}
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ json
    save_data(data_users)
    text = (
        f"–í–µ—Ä–æ—è—Ç–Ω–æ, —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —á–µ–ª–æ–≤–µ–∫–∞.\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.üèã‚Äç‚ôÇÔ∏èüöµ‚Äç‚ôÄÔ∏èü§∏")
    bot.send_message(chat_id=message.chat.id, text=text)
    bot.send_message(chat_id=message.chat.id, text="–ì–æ—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞—Ç—å?", reply_markup=keyboard_1)


@bot.message_handler(commands=["help"])
def send_help(message: Message):
    text = (
        f"–ß—Ç–æ–∂ —Ä–∞–∑ —Ç—ã —Ç—É—Ç, –≤–∏–¥–∏–º–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª–∞—Å—å –ø–æ–º–æ—â—åü´†.\n\n"
        f"–¢–µ–±–µ ü´µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä—è–¥ –≤–æ–ø—Ä–æ—Å—Å–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–ø–æ—Ä—Ç–æ–º, –Ω–µ –ø—ã—Ç–∞–π—Å—è –æ–±–¥—É–º—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ, –∏ —Ç–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –±—É–¥—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã‚≠ê.\n\n"
        f"–í –∫–æ–Ω—Ü–µ –æ–ø—Ä–æ—Å–∞, —è –≤—ã–≤–µ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.\n\n"
        f"–ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ —Ä–µ—à–∏—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏ –º—ã –Ω–∞—á–Ω—ë–º —Å —Ç–æ–±–æ–π, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å. –°–æ–≥–ª–∞—Å–∏—Å—å –ø—Ä–∏—è—Ç–Ω–æ,–∫–æ–≥–¥–∞ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ—Ö–∞–¥–∏—Ç—å –≤—Å—ë –ø–æ —Å—Ç–æ —Ç—ã—Å—è—á —Ä–∞–∑üòÖ. –î–ª—è —ç—Ç–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ—à—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π /return\n\n"
        f"–ß—Ç–æ –±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–∞–∫ —è —Å–º–æ–≥—É –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—èüòâ.\n"
    )
    bot.send_message(chat_id=message.chat.id, text=text)


# —Å–æ–∑–¥–∞—é –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
def filter_answer1(message: Message):
    keywords = ["–ö–æ–º–∞–Ω–∞–¥–∞", "–û–¥–∏–Ω–æ—á–Ω—ã–µ", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"]
    return message.text in keywords


def filter_answer2(message: Message):
    keywords = ["–ú—è—á", "–õ—ã–∂–∏", "–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã"]
    return message.text in keywords


def filter_answer3(message: Message):
    keywords = ["–¢–µ—Ö–Ω–∏–∫–∞ –∏ —Ç–∞–∫—Ç–∏–∫–∞", "–°–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "–î—Ä—É–≥–æ–µ"]
    return message.text in keywords


def filter_answer4(message: Message):
    keywords = ["–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è", "–°–∏–ª–æ–≤–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "–ú—ã—à–ª–µ–Ω–∏–µ"]
    return message.text in keywords


def filter_answer5(message: Message):
    keywords = ["–ü—Ä–æ—Ñ. —Å–ø–æ—Ä—Ç", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", "–ß–µ–º-—Ç–æ –∑–∞–Ω—è—Ç—å"]
    return message.text in keywords


def filter_return(message: Message):
    keywords = "‚§µÔ∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚§µÔ∏è"
    return message.text in keywords


# —Ç–∞–∫ –∫–∞–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–∑–¥–∞—é –≤–Ω—É—Ç—Ä–∏ —Ö–Ω–¥–ª–µ—Ä–∞ –∏ –¥–µ–ª–∞—é –µ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ stop
@bot.callback_query_handler(func=lambda call: True)
def button_click(call):
    if call.data == 'click':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úÖ‚úÖ‚úÖ",
                              reply_markup=InlineKeyboardMarkup())
        # –æ–±–Ω—É–ª—è—é –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ —Ä–µ—à–∏—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–µ—ã –Ω–µ —É—à–ª–∏ –∑–∞ —Å–≤–æ–∏ –ø—Ä–µ–¥–µ–ª—ã.
        # –æ–±–Ω—É–ª—è—é –≤ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å—Å–µ, –∞ –Ω–µ –≤ —Å—Ç–∞—Ä—Ç–µ, –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–≥–¥–∞ —Ä–µ—à–∏—Ç —É–¥–∞–ª–∏—Ç—å —á–∞—Ç, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å start —á—Ç–æ –±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ñ—É–Ω–∫—Ü—É–∏–∏ –≤–æ–∑—Ä–∞—â–µ–Ω–∏—è.
        data_users[str(call.message.chat.id)]["summer_sports"] = 0
        data_users[str(call.message.chat.id)]["winter_sports"] = 0
        data_users[str(call.message.chat.id)]["other"] = 0
        data_users[str(call.message.chat.id)]["progress"] = 0
        save_data(data_users)
        global markup_question_1
        markup_question_1 = ReplyKeyboardMarkup(resize_keyboard=True)
        markup_question_1.add(KeyboardButton("–ö–æ–º–∞–Ω–∞–¥–∞"))
        markup_question_1.add(KeyboardButton("–û–¥–∏–Ω–æ—á–Ω—ã–µ"))
        markup_question_1.add(KeyboardButton("–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"))
        data_users[str(call.message.chat.id)]["progress"] += 1
        # –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–æ–ø—Ä–æ—Å—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ info
        text = survey[0]["question"]
        sleep(1)
        bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=markup_question_1)
        text2 = survey[0]["answers"]
        bot.send_message(chat_id=call.message.chat.id, text=text2, reply_markup=markup_question_1)
        save_data(data_users)


@bot.message_handler(content_types=['text'],
                     func=filter_answer1)  # –µ—Å–ª–∏ —Ö–µ–Ω–¥–ª–µ—Ä –∑–∞–º–µ—Ç–∏—Ç –Ω—É–∂–Ω—ã–π –∫–ª—é—á, –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. 1 —Ö–µ–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–ª—Å—è –æ—Ç –∫–Ω–æ–ø–∫–∏.
def send_answer2(message: Message):
    text = survey[1]["question"]
    bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup_question_2)
    text2 = survey[1]["answers"]
    bot.send_message(chat_id=message.chat.id, text=text2, reply_markup=markup_question_2)
    # –ù–∞—á–∏—Å–ª—è—é –±–∞–ª–ª—ã –∑–∞ –æ—Ç–≤–µ—Ç + –ø—Ä–æ–≥—Ä–µ—Å—Å.
    data_users[str(message.chat.id)]["progress"] += 1
    if message.text == "–ö–æ–º–∞–Ω–∞–¥–∞":
        data_users[str(message.chat.id)]["summer_sports"] += 1
    elif message.text == "–û–¥–∏–Ω–æ—á–Ω—ã–µ":
        data_users[str(message.chat.id)]["winter_sports"] += 1
    elif message.text == "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å":
        data_users[str(message.chat.id)]["other"] += 1
    save_data(data_users)


@bot.message_handler(content_types=['text'], func=filter_answer2)
def send_answer3(message: Message):
    text = survey[2]["question"]
    bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup_question_3)
    text2 = survey[2]["answers"]
    bot.send_message(chat_id=message.chat.id, text=text2, reply_markup=markup_question_3)
    data_users[str(message.chat.id)]["progress"] += 1
    save_data(data_users)
    if message.text == "–ú—è—á":
        data_users[str(message.chat.id)]["summer_sports"] += 1
    elif message.text == "–õ—ã–∂–∏":
        data_users[str(message.chat.id)]["winter_sports"] += 1
    elif message.text == "–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã":
        data_users[str(message.chat.id)]["other"] += 1
    save_data(data_users)


@bot.message_handler(content_types=["text"], func=filter_answer3)
def send_answer4(message: Message):
    text = survey[3]["question"]
    bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup_question_4)
    text2 = survey[3]["answers"]
    bot.send_message(chat_id=message.chat.id, text=text2, reply_markup=markup_question_4)
    data_users[str(message.chat.id)]["progress"] += 1
    save_data(data_users)
    if message.text == "–¢–µ—Ö–Ω–∏–∫–∞ –∏ —Ç–∞–∫—Ç–∏–∫–∞":
        data_users[str(message.chat.id)]["summer_sports"] += 1
    elif message.text == "–°–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å":
        data_users[str(message.chat.id)]["winter_sports"] += 1
    elif message.text == "–î—Ä—É–≥–æ–µ":
        data_users[str(message.chat.id)]["other"] += 1
    save_data(data_users)


@bot.message_handler(content_types=["text"], func=filter_answer4)
def send_answer5(message: Message):
    text = survey[4]["question"]
    bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup_question_5)
    text2 = survey[4]["answers"]
    bot.send_message(chat_id=message.chat.id, text=text2, reply_markup=markup_question_5)
    data_users[str(message.chat.id)]["progress"] += 1
    save_data(data_users)
    if message.text == "–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è":
        data_users[str(message.chat.id)]["summer_sports"] += 1
    elif message.text == "–°–∏–ª–æ–≤–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏":
        data_users[str(message.chat.id)]["winter_sports"] += 1
    elif message.text == "–ú—ã—à–ª–µ–Ω–∏–µ":
        data_users[str(message.chat.id)]["other"] += 1
    save_data(data_users)


@bot.message_handler(content_types=["text"], func=filter_answer5)
def send_result(message: Message):
    if message.text == "–ü—Ä–æ—Ñ. —Å–ø–æ—Ä—Ç":
        data_users[str(message.chat.id)]["summer_sports"] += 1
    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã":
        data_users[str(message.chat.id)]["winter_sports"] += 1
    elif message.text == "–ß–µ–º-—Ç–æ –∑–∞–Ω—è—Ç—å":
        data_users[str(message.chat.id)]["other"] += 1
    save_data(data_users)
    # –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∫–∞—è —à–∫–∞–ª–∞ –Ω–∞–±—Ä–∞–ª–∞ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ, –ø—Ä–∏—Å—ã–ª–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞ info –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ media.
    if data_users[str(message.chat.id)]["summer_sports"] > data_users[str(message.chat.id)]["winter_sports"] and \
            data_users[str(message.chat.id)]["summer_sports"] > data_users[str(message.chat.id)]["other"]:
        with open('media/f.jpg', 'rb') as img:
            bot.send_photo(message.chat.id, img)
        with open('media/x.jpg', 'rb') as img:
            bot.send_photo(message.chat.id, img)
        bot.send_message(chat_id=message.chat.id, text=result[0], reply_markup=ReplyKeyboardRemove())
    elif data_users[str(message.chat.id)]["winter_sports"] > data_users[str(message.chat.id)]["summer_sports"] and \
            data_users[str(message.chat.id)]["winter_sports"] > data_users[str(message.chat.id)]["other"]:
        with open('media/a.jpg', 'rb') as img:
            bot.send_photo(message.chat.id, img)
        with open('media/t.jpg', 'rb') as img:
            bot.send_photo(message.chat.id, img)
        bot.send_message(chat_id=message.chat.id, text=result[1], reply_markup=ReplyKeyboardRemove())
    elif data_users[str(message.chat.id)]["other"] > data_users[str(message.chat.id)]["summer_sports"] and \
            data_users[str(message.chat.id)]["other"] > data_users[str(message.chat.id)]["winter_sports"]:
        with open('media/h.jpg', 'rb') as img:
            bot.send_photo(message.chat.id, img)
        with open('media/k.jpg', 'rb') as img:
            bot.send_photo(message.chat.id, img)
        bot.send_message(chat_id=message.chat.id, text=result[2], reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(chat_id=message.chat.id, text=result[3],
                         reply_markup=ReplyKeyboardRemove())  # reply_markup=ReplyKeyboardRemove() —É–¥–∞–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    # –û–±–Ω—É–ª—è—é —à–∫–∞–ª—ã.
    data_users[str(message.chat.id)]["summer_sports"] = 0
    data_users[str(message.chat.id)]["winter_sports"] = 0
    data_users[str(message.chat.id)]["other"] = 0
    data_users[str(message.chat.id)]["progress"] = 0
    save_data(data_users)
    sleep(3)
    bot.send_message(message.chat.id, text="–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑, –∂–º–∏ /start üöÄ")


# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å—Å–∞.
@bot.message_handler(commands=["return"])
def send_return(message: Message):
    markup_stop = ReplyKeyboardMarkup(resize_keyboard=True)
    markup_stop.add("‚§µÔ∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚§µÔ∏è")
    text = "–í—ã –ø—Ä–æ–¥–æ–∂–∏—Ç–µ –ø—Ä–æ—à–ª–æ–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µü§î?"
    bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup_stop)


@bot.message_handler(content_types=["text"], func=filter_return)
def send_continue(message: Message):
    # –ø—Ä–æ–≤–µ—Ä—è—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Ç—Å–∏ –æ—Ç –≤–æ–ø—Ä–æ—Å—Å–∞ –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    if message.text == "‚§µÔ∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚§µÔ∏è":
        data_users[str(message.chat.id)]["progress"] -= 1
        if data_users[str(message.chat.id)]["progress"] == 0:
            markup = markup_question_1
        elif data_users[str(message.chat.id)]["progress"] == 1:
            markup = markup_question_2
        elif data_users[str(message.chat.id)]["progress"] == 2:
            markup = markup_question_3
        elif data_users[str(message.chat.id)]["progress"] == 3:
            markup = markup_question_4
        elif data_users[str(message.chat.id)]["progress"] == 4:
            markup = markup_question_5
        elif data_users[str(message.chat.id)]["progress"] < 0:
            bot.send_message(chat_id=message.chat.id, text="üö•–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start üö•")
        # –ü—Ä–∏—Å—ã–ª–∞—é –≤–æ–ø—Ä–æ—Å—Å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        text1 = survey[data_users[str(message.chat.id)]["progress"]]["question"]
        bot.send_message(chat_id=message.chat.id, text=text1, reply_markup=markup)
        text2 = survey[data_users[str(message.chat.id)]["progress"]]["answers"]
        bot.send_message(chat_id=message.chat.id, text=text2, reply_markup=markup)
        data_users[str(message.chat.id)]["progress"] += 1


@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                               'text', 'location', 'contact', 'sticker'])
def send_echo(mesage: Message):
    text = (f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({mesage.text}).\n"
            f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.ü§ó")
    bot.send_message(chat_id=mesage.chat.id, text=text)


bot.infinity_polling()
